{# users dont have option to do any action only to view #}


{% extends 'base.html.twig' %}
{% block content %}

    {% include 'dashboard/user_info.html.twig' with {'user': user} %}
    
    {% include 'dashboard/trade/_trade_table.html.twig' with {'trades': trades, 'role': user.role} %}
    {% include 'dashboard/tables/_assets_view.html.twig' %}

{% endblock %}
    
  
{% block javascripts %}
    {{ parent() }}
    {% if not app.session.get('scripts_loaded') %}
        <script src="/js/trade_socket.js"></script>
        {% do app.session.set('scripts_loaded', true) %}
    {% endif %}

    <script>
     $(document).ready(function() {
            $('#tradesTable').DataTable();

            const socket = window.tradeSocket ? window.tradeSocket.socket : null;
            console.log('dashboard/trade/_trade_table.html.twig');
            
            const openTrades = {
                {% for trade in trades %}
                
                    {% if trade.status == 'open' %}
                        {{ trade.id }}: {
                            entryRate: {{ trade.entryRate }},
                            position: '{{ trade.position|lower }}',
                            tradeSize: {{ 10 * trade.lotCount }},
                            userCurrency: '{{ trade.user.currency|upper }}'
                        },
                    {% endif %}
                {% endfor %}
            };

            function calculatePnl(trade, assetData) {
                const lotCount = parseFloat(trade.lotCount);
                const conversionRate = (assetData.asset_name === 'BTC/USD' && trade.userCurrency === 'EUR') ? 0.9215 : 1;
 
                const pipValue = trade.tradeSize * 0.01 * conversionRate;
                let pnl = 0;

                if (trade.position === 'buy') {
                    pnl = (assetData.ask - trade.entryRate) * pipValue * 100;
                } else if (trade.position === 'sell') {
                    pnl = (trade.entryRate - assetData.bid) * pipValue * 100;
                }

                return parseFloat(pnl.toFixed(2));
            }

            if (socket && socket.addEventListener) {
                socket.addEventListener('message', function(event) {
                    const assetData = JSON.parse(event.data);
                    for (const tradeId in openTrades) {
                        const trade = openTrades[tradeId];
                        if (assetData.asset_name === 'BTC/USD') {
                            const pnl = calculatePnl(trade, assetData);
                            const cell = document.getElementById('pnl-' + tradeId);
                            if (cell) {
                                cell.textContent = pnl;
                                cell.style.transition = 'color 0.3s ease';
                                cell.style.color = pnl < 0 ? 'red' : pnl > 0 ? 'green' : 'black';
                            }
                        }
                    }
                });
            } else {
                console.error("Socket is not ready or undefined.");
            }
        });
    </script>
    
{% endblock %}