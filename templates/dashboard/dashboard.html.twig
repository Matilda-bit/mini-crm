{# templates/dashboard/dashboard.html.twig #}

{% extends 'base.html.twig' %}

{% block content %}
    {% include 'dashboard/user_info.html.twig' with {'user': user} %}

    {% include 'dashboard/hierarchyTree/hierarchy_view.html.twig' with {'rep': rep, 'isRoot': isRoot} %}

    {% include 'dashboard/tables/users_agents_table.html.twig' with {
        records: users,
        type: 'user',
        agents: agents,
        tableName: 'users_tb',
        current_user_id: app.user.id
    } only %}

    {% include 'dashboard/tables/users_agents_table.html.twig' with {
        records: agents,
        type: 'agent',
        agents: agents,
        tableName: 'agents_tb',
        current_user_id: app.user.id
    } only %}

    {% include 'dashboard/trade/_trade_table.html.twig' with {'trades': trades, 'role': user.role} %}
    {% include 'dashboard/trade/_trade_form.html.twig' with {'users': users, 'is_agent': true,} %}
    {% include 'dashboard/tables/_assets_view.html.twig' %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {% if not app.session.get('scripts_loaded') %}
        <script src="/js/trade_socket.js"></script>
        {% do app.session.set('scripts_loaded', true) %}
    {% endif %}
    {# <script src="/js/trade_socket.js"></script> #}
    <script>
        $(document).ready(function() {
            const agentsTable = $('#agentsTable').DataTable({
                dom: 'lrtip',
                searching: true
            });

            const usersTable = $('#usersTable').DataTable({
                dom: 'lrtip',
                searching: true
            });

            $('#customSearch').on('keyup', function() {
                const selectedColumn = $('#columnSelect').val();
                const value = this.value;

                if (selectedColumn === 'all') {
                    agentsTable.search(value).draw();
                    usersTable.search(value).draw();
                } else {
                    agentsTable.search('').columns().search('');
                    usersTable.search('').columns().search('');
                    agentsTable.column(selectedColumn).search(value).draw();
                    usersTable.column(selectedColumn).search(value).draw();
                }
            });

            $('#columnSelect').on('change', function() {
                $('#customSearch').trigger('keyup');
            });

            $('#tradesTable').DataTable();
        });

        // Сохраняем открытые сделки (можно дополнить серверной логикой для передачи лотов и валюты)
        const openTrades = {
            {% for trade in trades %}
                {% if trade.status == 'open' %}
                    {{ trade.id }}: {
                        entryRate: {{ trade.entryRate }},
                        position: '{{ trade.position|lower }}',
                        tradeSize: {{ 10 * trade.lotCount }},
                        userCurrency: '{{ app.user.currency|upper }}'
                    },
                {% endif %}
            {% endfor %}
        };

        function calculatePnl(trade, assetData) {
            const lotCount = parseFloat(trade.lotCount); // Преобразует в число
            const conversionRate = (assetData.asset_name === 'BTC/USD' && trade.userCurrency === 'EUR') ? 0.9215 : 1;

            const pipValue = trade.tradeSize * 0.01 * conversionRate;
            let pnl = 0;

            if (trade.position === 'buy') {
                pnl = (assetData.ask - trade.entryRate) * pipValue * 100;
            } else if (trade.position === 'sell') {
                pnl = (trade.entryRate - assetData.bid) * pipValue * 100;
            }

            return parseFloat(pnl.toFixed(2)); // округляем до 2 знаков
        }

        function waitForTradeSocket(retries = 10, delay = 200) {
            if (window.tradeSocket && window.tradeSocket.socket) {
                initSocketListener(window.tradeSocket.socket);
            } else if (retries > 0) {
                setTimeout(() => waitForTradeSocket(retries - 1, delay), delay);
            } else {
                console.error('Socket is not ready or undefined after waiting:', window.tradeSocket);
            }
        }

        function initSocketListener(socket) {
            console.log("Инициализируем сокет-события");
            socket.addEventListener('message', function(event) {
                let assetData;
                try {
                    assetData = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
                } catch (e) {
                    console.error("Ошибка при парсинге WS-сообщения:", event.data);
                    return;
                }

                for (const tradeId in openTrades) {
                    const trade = openTrades[tradeId];
                    if (assetData.asset_name === 'BTC/USD') {
                        const pnl = calculatePnl(trade, assetData);
                        const cell = document.getElementById('pnl-' + tradeId);
                        if (cell) {
                            cell.textContent = pnl;
                            cell.style.transition = 'color 0.3s ease';
                            cell.style.color = pnl < 0 ? 'red' : pnl > 0 ? 'green' : 'black';
                        }
                    }
                }
            });
        }

        waitForTradeSocket();
    </script>
{% endblock %}
