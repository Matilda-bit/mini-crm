{# templates/dashboard/trade/_trade_form.html.twig #}

<h2 id="open-trade">Open Trade for a User</h2>

<script src="{{ asset('js/toast.js') }}"></script>

<button id="toggleTradeForm">Open New Trade</button>

<div id="tradeFormContainer" style="display: none; margin-top: 20px;">
     <form id="tradeForm" method="POST">
        {% if is_agent %}
            <label for="target_user">User:</label>
            <select name="target_user" id="target_user" required>
                {% for u in users %}
                    {% if u.agent != null %}
                        <option value="{{ u.id }}" data-currency="{{ u.currency|default('EUR') }}">
                            {{ u.username }}
                        </option>
                    {% endif %}
                {% endfor %}
            </select><br><br>
        {% endif %}

        <label>Asset:</label>
        <select name="asset" id="asset" required>
            <option value="BTC/USD">BTC/USD</option>
            {# <option value="BTC/EUR">BTC/EUR</option> #}
        </select><br><br>

        <label>Bid Rate:</label>
        <span id="bidRate">--</span> <br>
        <label>Ask Rate:</label>
        <span id="askRate">--</span> <br><br>

        <label for="lot_count">Lot Count:</label>
        <input type="number" name="lot_count" id="lot_count" min="0.1" max="100" step="0.1" required><br><br>

        <label>Lot Size:</label>
        <input type="text" value="10" readonly><br><br>

        <label>Trade Size:</label>
        <span id="tradeSize">--</span><br><br>

        <label>Pip Value:</label>
        <span id="pipValue">--</span><br><br>

        <label>User Margin:</label>
        <span id="userMargin">--</span><br><br>

        <label for="position">Position:</label>
        <select name="position" id="position" required>
            <option value="buy">Buy</option>
            <option value="sell">Sell</option>
        </select><br><br>

        <label for="sl">Stop Loss (SL):</label>
        <input type="number" name="sl" id="sl" step="0.0001"><br><br>

        <label for="tp">Take Profit (TP):</label>
        <input type="number" name="tp" id="tp" step="0.0001"><br><br>

        <button type="submit">Open Trade</button>
    </form>
</div>

<script src="/js/trade_socket.js"></script>
<script>
    document.getElementById('toggleTradeForm').addEventListener('click', () => {
        const form = document.getElementById('tradeFormContainer');
        const button = document.getElementById('toggleTradeForm');
        
        if (form.style.display === 'none') {
            form.style.display = 'block';
            button.textContent = 'Hide Form';
        } else {
            form.style.display = 'none';
            button.textContent = 'Open New Trade';
        }
        });

    document.getElementById('tradeForm').addEventListener('submit', function (e) {
        e.preventDefault(); 

        const formData = new FormData(this);

        fetch("{{ path('role_open_trade') }}", {
            method: "POST",
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message || "Trade successfully opened!", 'success');
            } else {
                showToast(data.message || "Failed to open trade.", 'danger');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast("An error occurred while processing your request.", 'danger');
        });
    });

    let bid = 0;
    let ask = 0;
    const lotSize = 10;
    let userCurrency = 'EUR';
    const conversionRate = 0.9215; // USD to EUR ONLYYY!!!
    const marketData = {};

    const socket = window.tradeSocket ? window.tradeSocket.socket : null;

    if (socket && socket.addEventListener) {
        socket.addEventListener('message', function(event) {
            let data;
            try {
                data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
            } catch (e) {
                console.error("Error parsing WS message:", event.data);
                return;
            }

            if (data.asset_name) {
                marketData[data.asset_name] = data;
                updateRatesFromAsset(); 
            }
        });
    } else {
        console.error("Socket is not ready or undefined:",  window.tradeSocket);
    }

    document.getElementById('lot_count').addEventListener('input', calculateValues);
    document.getElementById('position').addEventListener('change', calculateValues);
    document.getElementById('asset').addEventListener('change', updateRatesFromAsset);

    const userSelect = document.getElementById('target_user');

    if (userSelect) {
        userSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            userCurrency = selectedOption.dataset.currency || 'EUR';
            calculateValues();
        });

        // Установим валюту при первой загрузке формы
        const initialOption = userSelect.options[userSelect.selectedIndex];
        userCurrency = initialOption.dataset.currency || 'EUR';
    }
    
    function updateRatesFromAsset() {
        const selectedAsset = document.getElementById('asset').value;
        const assetData = marketData[selectedAsset];

        if (assetData) {
            bid = assetData.bid;
            ask = assetData.ask;
            if (document.getElementById('bidRate') && document.getElementById('askRate')) {
                document.getElementById('bidRate').textContent = bid.toFixed(2);
                document.getElementById('askRate').textContent = ask.toFixed(2);
            }
            calculateValues();
        }
    }

    function calculateValues() {
        const lotCount = parseFloat(document.getElementById('lot_count').value);
        if (isNaN(lotCount)) return;

        const tradeSize = lotSize * lotCount;
        const pipValue = tradeSize * 0.01 * (userCurrency === 'USD' ? 1 : conversionRate);
        const userMargin = tradeSize * 0.1 * (userCurrency === 'USD' ? 1 : conversionRate) * bid;

        document.getElementById('tradeSize').textContent = `${tradeSize.toFixed(2)} ${userCurrency}`;
        document.getElementById('pipValue').textContent = `${pipValue.toFixed(2)} ${userCurrency}`;
        document.getElementById('userMargin').textContent = `${userMargin.toFixed(2)} ${userCurrency}`;
    }
</script>