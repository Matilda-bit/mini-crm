{# templates/dashboard/dashboard.html.twig #}

{% extends 'base.html.twig' %}

{% block content %}
    {% include 'dashboard/user_info.html.twig' with {'user': user} %}

    {% include 'dashboard/hierarchyTree/hierarchy_view.html.twig' with {'rep': rep, 'isRoot': isRoot} %}

    {% include 'dashboard/tables/users_agents_table.html.twig' with {
        records: users,
        type: 'user',
        agents: agents,
        tableName: 'users_tb',
        current_user_id: app.user.id
    } only %}

    {% include 'dashboard/tables/users_agents_table.html.twig' with {
        records: agents,
        type: 'agent',
        agents: agents,
        tableName: 'agents_tb',
        current_user_id: app.user.id
    } only %}

    {% include 'dashboard/trade/_trade_table.html.twig' with {'trades': trades, 'role': user.role} %}
    {% include 'dashboard/trade/_trade_form.html.twig' with {'users': users, 'is_agent': true,} %}
    {% include 'dashboard/tables/_assets_view.html.twig' %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        $(document).ready(function() {
            const agentsTable = $('#agentsTable').DataTable({
                dom: 'lrtip',
                searching: true
            });

            const usersTable = $('#usersTable').DataTable({
                dom: 'lrtip',
                searching: true
            });

            $('#customSearch').on('keyup', function() {
                const selectedColumn = $('#columnSelect').val();
                const value = this.value;

                if (selectedColumn === 'all') {
                    agentsTable.search(value).draw();
                    usersTable.search(value).draw();
                } else {
                    agentsTable.search('').columns().search('');
                    usersTable.search('').columns().search('');
                    agentsTable.column(selectedColumn).search(value).draw();
                    usersTable.column(selectedColumn).search(value).draw();
                }
            });

            $('#columnSelect').on('change', function() {
                $('#customSearch').trigger('keyup');
            });


            $('#tradesTable').DataTable();

            const socket = new WebSocket('wss://127.0.0.1:8080');
            console.log('dashboard/trade/_trade_table.html.twig');

            // Сохраняем открытые сделки (можно дополнить серверной логикой для передачи лотов и валюты)
            const openTrades = {
                {% for trade in trades %}
                
                    {% if trade.status == 'open' %}
                        {{ trade.id }}: {
                            entryRate: {{ trade.entryRate }},
                            position: '{{ trade.position|lower }}',
                            tradeSize: {{ 10 * trade.lotCount }},
                            userCurrency: '{{ app.user.currency|upper }}'
                        },
                    {% endif %}
                {% endfor %}
            };

            function calculatePnl(trade, assetData) {
                const lotCount = parseFloat(trade.lotCount); // Преобразует в число
                const conversionRate = (assetData.asset_name === 'BTC/USD' && trade.userCurrency === 'EUR') ? 0.9215 : 1;
 
                const pipValue = trade.tradeSize * 0.01 * conversionRate;
                let pnl = 0;

                if (trade.position === 'buy') {
                    pnl = (assetData.ask - trade.entryRate) * pipValue * 100;
                } else if (trade.position === 'sell') {
                    pnl = (trade.entryRate - assetData.bid) * pipValue * 100;
                }

                // Округление PNL до 2 знаков
                return parseFloat(pnl.toFixed(2));
            }

            socket.onmessage = function(event) {
                const assetData = JSON.parse(event.data); // должны быть bid и ask
                for (const tradeId in openTrades) {
                    const trade = openTrades[tradeId];
                    if (assetData.asset_name === 'BTC/USD') {
                        const pnl = calculatePnl(trade, assetData);
                        const cell = document.getElementById('pnl-' + tradeId);
                        if (cell) {
                            cell.textContent = pnl;
                            cell.style.transition = 'color 0.3s ease';
                            cell.style.color = pnl < 0 ? 'red' : pnl > 0 ? 'green' : 'black';
                        }
                    }
                }
            };
        });
    </script>
{% endblock %}
