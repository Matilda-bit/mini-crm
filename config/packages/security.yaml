security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: bcrypt  # Используем bcrypt для хеширования паролей
            cost: 12           # Стандартное значение для bcrypt, можно увеличить для большей безопасности
            # Вы также можете использовать argon2i или argon2id
            # algorithm: argon2i
            # time_cost: 4
            # memory_cost: 1024

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_database:  # Настроим провайдер для загрузки пользователей из базы данных
            entity:
                class: App\Entity\User
                property: username  # Идентификация пользователя по имени пользователя

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_database  # Используем наш провайдер для загрузки пользователей из базы данных
            custom_authenticators:
            - App\Security\LoginFormAuthenticator
            entry_point: App\Security\LoginFormAuthenticator
            # Активируем различные способы аутентификации

            logout:
                path: app_logout
                target: app_login_register
                invalidate_session: true 
    # Управление доступом
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/agent, roles: ROLE_REP }
        - { path: ^/assign-agent, roles: [ROLE_ADMIN, ROLE_REP] }
        - { path: ^/open-trade, roles: [ROLE_ADMIN, ROLE_REP] }
        - { path: ^/close-trade, roles: [ROLE_ADMIN, ROLE_REP] }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
